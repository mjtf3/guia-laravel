{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"blade/","title":"Blade en Laravel","text":"<p>Blade es el sistema de plantillas que Laravel utiliza para definir vistas. Permite realizar operaciones como sustituci\u00f3n de variables, herencia entre plantillas, definici\u00f3n de layouts y m\u00e1s.</p> <ul> <li>Los archivos Blade tienen la extensi\u00f3n <code>.blade.php</code></li> <li>Para referenciar una vista que usa Blade no es necesario indicar la extensi\u00f3n:<ul> <li><code>\"home.blade.php\"</code> \u2192 <code>view('home');</code></li> </ul> </li> </ul>"},{"location":"blade/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":""},{"location":"blade/#comentarios","title":"Comentarios","text":"<p>Los comentarios en Blade no se muestran en el HTML:</p> <pre><code>{{-- Este comentario no se mostrar\u00e1 en HTML --}}\n</code></pre>"},{"location":"blade/#mostrar-valores","title":"Mostrar valores","text":"<p>Para mostrar datos utilizamos llaves dobles:</p> <pre><code>Hola {{ $name }}\nLa hora actual es {{ time() }}\n</code></pre> <p>!!! warning \"Escape de datos\"         Por defecto, los datos son escapados para prevenir ataques XSS.         Si no quieres escapar los datos (usar con precauci\u00f3n):         <code>blade         Hola {!! $name !!}</code></p>"},{"location":"blade/#operador-ternario","title":"Operador ternario","text":"<pre><code>{{ isset($name) ? $name : 'Default' }}\n</code></pre> <p>O usando el operador de coalescencia nula:</p> <pre><code>{{ $name ?? 'Default' }}\n</code></pre>"},{"location":"blade/#estructuras-de-control","title":"Estructuras de control","text":""},{"location":"blade/#condicionales","title":"Condicionales","text":""},{"location":"blade/#if","title":"If","text":"<pre><code>@if(count($users) === 1)\n        Solo hay un usuario!\n@elseif(count($users) &gt; 1)\n        Hay muchos usuarios!\n@else\n        No hay ning\u00fan usuario :(\n@endif\n</code></pre>"},{"location":"blade/#unless-a-menos-que","title":"Unless (a menos que)","text":"<pre><code>@unless(Auth::check())\n        Usuario no identificado\n@endunless\n</code></pre>"},{"location":"blade/#bucles","title":"Bucles","text":""},{"location":"blade/#for","title":"For","text":"<pre><code>@for($i = 0; $i &lt; 10; $i++)\n        El valor actual es {{ $i }}\n@endfor\n</code></pre>"},{"location":"blade/#while","title":"While","text":"<pre><code>@while(true)\n        &lt;p&gt;Soy un bucle while infinito!&lt;/p&gt;\n@endwhile\n</code></pre> <p>!!! tip         Dentro de un bucle puedes usar <code>@continue</code> y <code>@break</code> para controlar la ejecuci\u00f3n.</p>"},{"location":"blade/#foreach","title":"Foreach","text":"<p>Itera sobre una colecci\u00f3n de elementos:</p> <pre><code>@foreach($users as $user)\n        &lt;p&gt;Usuario {{ $user-&gt;id }}&lt;/p&gt;\n@endforeach\n</code></pre>"},{"location":"blade/#forelse","title":"Forelse","text":"<p>Similar a foreach pero con un caso especial para colecciones vac\u00edas:</p> <pre><code>@forelse($users as $user)\n        &lt;li&gt;{{ $user-&gt;name }}&lt;/li&gt;\n@empty\n        &lt;p&gt;No hay usuarios&lt;/p&gt;\n@endforelse\n</code></pre>"},{"location":"blade/#reutilizacion-de-codigo","title":"Reutilizaci\u00f3n de c\u00f3digo","text":""},{"location":"blade/#sub-vistas","title":"Sub-vistas","text":"<p>Incluir una plantilla dentro de otra:</p> <pre><code>@include('view_name')\n\n{{-- Con datos adicionales --}}\n@include('view_name', ['variable' =&gt; 'valor'])\n</code></pre>"},{"location":"blade/#componentes","title":"Componentes","text":"<p>Los componentes son sub-vistas parametrizables ubicadas en <code>/resources/views/components</code>:</p> <pre><code>&lt;!-- /resources/views/components/alert.blade.php --&gt;\n&lt;div class=\"alert alert-danger\"&gt;\n        {{ $slot }}\n&lt;/div&gt;\n</code></pre> <p>Para usar un componente:</p> <pre><code>&lt;x-alert&gt;\n        &lt;strong&gt;Whoops!&lt;/strong&gt; Something went wrong!\n&lt;/x-alert&gt;\n</code></pre>"},{"location":"blade/#slots-con-nombre","title":"Slots con nombre","text":"<p>Puedes definir slots adicionales en tus componentes:</p> <pre><code>&lt;!-- /resources/views/components/alert.blade.php --&gt;\n&lt;div class=\"alert alert-danger\"&gt;\n        &lt;div class=\"alert-title\"&gt;{{ $title }}&lt;/div&gt;\n        {{ $slot }}\n&lt;/div&gt;\n</code></pre> <p>Para asignarles valor:</p> <pre><code>&lt;x-alert&gt;\n        &lt;x-slot name=\"title\"&gt;\n                Forbidden\n        &lt;/x-slot&gt;\n        You are not allowed to access this resource!\n&lt;/x-alert&gt;\n</code></pre>"},{"location":"blade/#layouts","title":"Layouts","text":""},{"location":"blade/#definicion-de-layout","title":"Definici\u00f3n de layout","text":"<pre><code>&lt;!-- /resources/views/layouts/master.blade.php --&gt;\n&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;@yield('title')&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        @section('menu')\n                Contenido del menu\n        @show\n\n        &lt;div class=\"container\"&gt;\n                @yield('content')\n        &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"blade/#extender-un-layout","title":"Extender un layout","text":"<pre><code>@extends('layouts.master')\n\n@section('title', 'T\u00edtulo de la p\u00e1gina')\n\n@section('menu')\n        @parent\n        &lt;p&gt;Este contenido es a\u00f1adido al men\u00fa principal.&lt;/p&gt;\n@endsection\n\n@section('content')\n        &lt;p&gt;Este apartado aparecer\u00e1 en la secci\u00f3n \"content\".&lt;/p&gt;\n@endsection\n</code></pre>"},{"location":"installation/","title":"Creaci\u00f3n de un Proyecto Laravel","text":""},{"location":"installation/#nuevo-proyecto","title":"Nuevo Proyecto","text":"<p>Para crear un nuevo proyecto Laravel 11:</p> <pre><code>composer create-project laravel/laravel=11.* miproyecto --prefer-dist\n</code></pre>"},{"location":"installation/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":"<ol> <li>Edita el archivo <code>.env</code>:     <code>SESSION_DRIVER=file</code></li> </ol>"},{"location":"installation/#ejecucion-del-proyecto","title":"Ejecuci\u00f3n del Proyecto","text":"<p>Para iniciar el servidor de desarrollo:</p> <pre><code>php artisan serve\n</code></pre> <p>Nota: Este comando iniciar\u00e1 un servidor local en <code>http://localhost:8000</code></p>"},{"location":"logging/","title":"Gesti\u00f3n de Registros (Logging) en Laravel","text":"<p>Laravel integra la librer\u00eda Monolog para la gesti\u00f3n de archivos de registro (logs).</p>"},{"location":"logging/#documentacion-oficial","title":"Documentaci\u00f3n Oficial","text":"<p>Consulta la documentaci\u00f3n de Laravel para m\u00e1s detalles sobre la configuraci\u00f3n y el uso de logging.</p>"},{"location":"logging/#uso-de-monolog","title":"Uso de Monolog","text":"<p>Monolog permite imprimir mensajes que se almacenar\u00e1n en el archivo de registro, ubicado por defecto en <code>storage/logs/laravel.log</code>.</p>"},{"location":"logging/#niveles-de-importancia","title":"Niveles de Importancia","text":"<p>Los mensajes pueden tener distintos niveles de importancia, de menor a mayor:</p> <ul> <li>debug</li> <li>info</li> <li>notice</li> <li>warning</li> <li>error</li> <li>critical</li> <li>alert</li> <li>emergency</li> </ul> <p>Nota: S\u00f3lo se guardar\u00e1n en el log aquellos mensajes cuyo nivel de importancia sea mayor o igual al especificado en el fichero <code>config/logging.php</code>.</p>"},{"location":"logging/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<p>Para utilizar Monolog, es necesario incluir la clase <code>Log</code>:</p> <pre><code>use Illuminate\\Support\\Facades\\Log;\n</code></pre> <p>La clase ofrece m\u00e9todos est\u00e1ticos que se corresponden con los niveles de importancia. Por ejemplo:</p> <pre><code>Log::debug(\"Debug message\");\nLog::warning(\"This is a warning\");\n</code></pre>"},{"location":"migrations/","title":"Migraciones en Laravel","text":""},{"location":"migrations/#configuracion-de-la-base-de-datos","title":"Configuraci\u00f3n de la Base de Datos","text":"<p>Laravel utiliza variables de entorno para la configuraci\u00f3n de la base de datos. Estos valores se especifican en el archivo <code>.env</code> ubicado en la ra\u00edz del proyecto:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=dss\nDB_USERNAME=dss\nDB_PASSWORD=dss\n</code></pre> <p>Nota: En los entornos de laboratorio, se proporciona una base de datos \"dss\" accesible con usuario \"dss\" y contrase\u00f1a \"dss\".</p>"},{"location":"migrations/#configuracion-para-pruebas","title":"Configuraci\u00f3n para Pruebas","text":"<p>Para habilitar las pruebas automatizadas con base de datos, modifica el archivo <code>phpunit.xml</code> en la ra\u00edz del proyecto:</p> <pre><code>&lt;env name=\"DB_CONNECTION\" value=\"mysql\"/&gt;\n&lt;env name=\"DB_DATABASE\" value=\"dss\"/&gt;\n</code></pre> <p>Tip: Para evitar modificar la base de datos de desarrollo durante las pruebas, considera usar una base de datos separada para testing.</p>"},{"location":"migrations/#inicializacion-de-base-de-datos","title":"Inicializaci\u00f3n de Base de Datos","text":"<pre><code>php artisan migrate:install\n</code></pre>"},{"location":"migrations/#creacion-de-migraciones","title":"Creaci\u00f3n de Migraciones","text":""},{"location":"migrations/#nueva-tabla","title":"Nueva Tabla","text":"<p>Para crear una migraci\u00f3n de una nueva tabla:</p> <pre><code>php artisan make:migration create_products_table --create=products\n</code></pre> <p>Esto crear\u00e1 un archivo en: <code>database/migrations/&lt;TIMESTAMP&gt;_create_products_table.php</code></p>"},{"location":"migrations/#modificar-tabla-existente","title":"Modificar Tabla Existente","text":"<p>Para modificar una tabla existente:</p> <pre><code>php artisan make:migration add_price_to_products_table --table=products\n</code></pre>"},{"location":"migrations/#gestion-de-migraciones","title":"Gesti\u00f3n de Migraciones","text":""},{"location":"migrations/#ejecutar-migraciones","title":"Ejecutar Migraciones","text":"<pre><code>php artisan migrate\n</code></pre>"},{"location":"migrations/#deshacer-migraciones","title":"Deshacer Migraciones","text":"<pre><code># Deshacer \u00faltima migraci\u00f3n\nphp artisan migrate:rollback\n\n# Deshacer todas las migraciones\nphp artisan migrate:reset\n\n# Deshacer y reejecutar todas las migraciones\nphp artisan migrate:refresh\n</code></pre>"},{"location":"migrations/#estado-de-migraciones","title":"Estado de Migraciones","text":"<p>Para verificar el estado actual:</p> <pre><code>php artisan migrate:status\n</code></pre>"},{"location":"migrations/#definicion-de-campos-en-base-de-datos","title":"Definici\u00f3n de Campos en Base de Datos","text":""},{"location":"migrations/#tipos-de-campos-basicos","title":"Tipos de Campos B\u00e1sicos","text":"Comando Laravel Equivalencia en Base de Datos <code>$table-&gt;id();</code> Autoincremental UNSIGNED BIGINT (clave primaria) <code>$table-&gt;unsignedBigInteger('votes');</code> UNSIGNED BIGINT (usado para claves ajenas) <code>$table-&gt;boolean('confirmed');</code> BOOLEAN <code>$table-&gt;date('created_at');</code> DATE <code>$table-&gt;dateTime('created_at', 0);</code> DATETIME con precisi\u00f3n opcional <code>$table-&gt;double('amount', 8, 2);</code> DOUBLE con precisi\u00f3n y escala <code>$table-&gt;float('amount', 8, 2);</code> FLOAT con precisi\u00f3n y escala <code>$table-&gt;integer('votes');</code> INTEGER <code>$table-&gt;string('name', 100);</code> VARCHAR con longitud opcional <code>$table-&gt;text('description');</code> TEXT <code>$table-&gt;time('sunrise', 0);</code> TIME con precisi\u00f3n opcional <code>$table-&gt;timestamp('added_on', 0);</code> TIMESTAMP con precisi\u00f3n opcional"},{"location":"migrations/#modificadores-de-campos","title":"Modificadores de Campos","text":"<ul> <li><code>-&gt;nullable($value = true)</code>: Permite valores NULL</li> <li><code>-&gt;default($value)</code>: Especifica valor por defecto</li> </ul> <p>Nota: Los campos son obligatorios por defecto a menos que se especifique <code>nullable()</code></p>"},{"location":"migrations/#indices","title":"\u00cdndices","text":"<p>Para a\u00f1adir \u00edndices a los campos:</p> <pre><code>$table-&gt;primary('id');                  // Clave primaria\n$table-&gt;primary(['first', 'last']);     // Primaria compuesta\n$table-&gt;unique('email');                // Campo \u00fanico\n$table-&gt;index('state');                 // \u00cdndice simple\n$table-&gt;string('email')-&gt;unique();      // \u00cdndice al crear campo\n</code></pre>"},{"location":"migrations/#claves-foraneas-foreigns-keys","title":"Claves For\u00e1neas (Foreigns Keys)","text":"<p>Para crear relaciones entre tablas:</p> <pre><code>$table-&gt;foreignId('user_id')-&gt;constrained();\n\n// Con opciones adicionales\n$table-&gt;foreignId('user_id')-&gt;constrained()\n    -&gt;cascadeOnDelete();\n\n// Eliminar clave for\u00e1nea\n$table-&gt;dropForeign(['user_id']);\n</code></pre>"},{"location":"rutas/","title":"Rutas en Laravel","text":"<p>Las rutas de la aplicaci\u00f3n se definen en los siguientes ficheros:</p> <p>Directorio <code>routes/</code>: - <code>api.php</code> \u2192 Rutas para API - <code>channels.php</code> \u2192 Suscripciones a eventos - <code>console.php</code> \u2192 Rutas para consola - <code>web.php</code> \u2192 Rutas para acceso Web</p> <p>Nota: Cualquier ruta no definida retornar\u00e1 un error 404.</p>"},{"location":"rutas/#definicion-de-rutas","title":"Definici\u00f3n de rutas","text":"<p>Para cada ruta se define: - M\u00e9todo HTTP de la petici\u00f3n: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> - Ruta URL (sin el dominio, que est\u00e1 definido en <code>config/app.php</code>) - Respuesta a la petici\u00f3n a esa ruta</p> <p>Podemos devolver tres tipos de respuestas: - Un valor (como una cadena) - Una vista - Enlazar con un m\u00e9todo de un controlador</p>"},{"location":"rutas/#ejemplos-basicos","title":"Ejemplos b\u00e1sicos","text":"<p>Ejemplo de ruta para peticiones tipo GET a la URL ra\u00edz:</p> <pre><code>Route::get('/', function() {\n    return '\u00a1Hola mundo!';\n});\n</code></pre> <p>Ejemplo de respuesta a peticiones tipo POST:</p> <pre><code>Route::post('foo/bar', function() {\n    return '\u00a1Hola mundo!';\n});\n</code></pre>"},{"location":"rutas/#multiples-metodos-http","title":"M\u00faltiples m\u00e9todos HTTP","text":"<p>Definir una ruta que responda a varios tipos de peticiones:</p> <pre><code>Route::match(['GET', 'POST'], '/', function() {\n    return '\u00a1Hola mundo!';\n});\n</code></pre> <p>O que responda a todos los m\u00e9todos HTTP:</p> <pre><code>Route::any('foo', function() {\n    return '\u00a1Hola mundo!';\n});\n</code></pre>"},{"location":"rutas/#parametros-en-rutas","title":"Par\u00e1metros en rutas","text":"<p>Para a\u00f1adir par\u00e1metros a las rutas, se indican entre llaves <code>{}</code>:</p> <pre><code>Route::get('user/{id}', function($id) {\n    return 'User ' . $id;\n});\n</code></pre> <p>Si queremos par\u00e1metros opcionales, a\u00f1adimos el s\u00edmbolo <code>?</code>:</p> <pre><code>Route::get('user/{name?}', function($name = null) {\n    return $name;\n});\n</code></pre> <p>Para generar un enlace a una ruta:</p> <pre><code>$url = url('foo');\n</code></pre>"},{"location":"rutas/#rutas-con-nombre","title":"Rutas con nombre","text":"<p>Podemos asignar nombre a las rutas:</p> <pre><code>Route::get('user/{id}', function($id) {\n    // L\u00f3gica\n})-&gt;name('user.show');\n</code></pre> <p>Se puede generar un enlace a una ruta usando su nombre:</p> <pre><code>$url = route('user.show', ['id' =&gt; 1]);\n</code></pre>"},{"location":"seeding/","title":"Seeders de Base de Datos","text":""},{"location":"seeding/#database-seeding","title":"Database Seeding","text":"<p>Los seeders de base de datos permiten insertar datos iniciales de prueba en tu base de datos. Esto es particularmente \u00fatil para:</p> <ul> <li>Pruebas de desarrollo</li> <li>Pre-poblar tablas que requieren datos iniciales</li> </ul>"},{"location":"seeding/#ubicacion-y-estructura","title":"Ubicaci\u00f3n y Estructura","text":"<p>Los seeders se almacenan en el directorio <code>database/seeds</code>. El m\u00e9todo <code>run</code> de la clase <code>DatabaseSeeder</code> es el punto de entrada, desde donde puedes:</p> <ul> <li>Ejecutar m\u00e9todos privados dentro de la clase</li> <li>Llamar a otros archivos/clases de seeders</li> </ul>"},{"location":"seeding/#comandos-artisan-disponibles","title":"Comandos Artisan Disponibles","text":"<p>Puedes utilizar los siguientes comandos para trabajar con seeders:</p> <pre><code># Crear un nuevo seeder\nphp artisan make:seeder UsersTableSeeder\n\n# Ejecutar todos los seeders\nphp artisan db:seed\n\n# Ejecutar un \u00fanico seeder\nphp artisan db:seed --class=SeederAEjecutar\n\n# Refrescar la base de datos y sembrar\nphp artisan migrate:refresh --seed\n</code></pre>"},{"location":"seeding/#ejemplos-de-implementacion","title":"Ejemplos de Implementaci\u00f3n","text":""},{"location":"seeding/#la-clase-databaseseeder","title":"La Clase DatabaseSeeder","text":"<pre><code>class DatabaseSeeder extends Seeder \n{\n    public function run() \n    {\n        // Llamar a otro archivo seeder\n        $this-&gt;call(UserTableSeeder::class);\n\n        // Mostrar informaci\u00f3n en la consola\n        $this-&gt;command-&gt;info('\u00a1Tabla de usuarios sembrada!');\n    }\n}\n</code></pre>"},{"location":"seeding/#implementacion-del-usertableseeder","title":"Implementaci\u00f3n del UserTableSeeder","text":"<pre><code>class UsersTableSeeder extends Seeder \n{\n    public function run() \n    {\n        // Limpiar la tabla de usuarios\n        DB::table('users')-&gt;delete();\n\n        // Insertar un nuevo registro\n        DB::table('users')-&gt;insert([\n            'name' =&gt; 'NombreUsuario',\n            'email' =&gt; 'nombre@dominio.com',\n            'password' =&gt; 'contrase\u00f1asegura'\n        ]);\n\n        // Nota: usa el m\u00e9todo insertGetId() para obtener el ID asignado\n    }\n}\n</code></pre>"},{"location":"seeding/#query-builder","title":"Query Builder","text":"<p>Laravel proporciona un conjunto robusto de herramientas para interactuar con tu base de datos:</p>"},{"location":"seeding/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Compatible con m\u00faltiples bases de datos soportadas por Laravel</li> <li>Sintaxis clara y legible</li> <li>Protecci\u00f3n contra inyecci\u00f3n SQL</li> </ul>"},{"location":"seeding/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>use Illuminate\\Support\\Facades\\DB;\n\n// Consulta b\u00e1sica\n$users = DB::table('users')-&gt;get();\n\n// Iterar resultados\nforeach($users as $user) {\n    echo $user-&gt;name;\n}\n</code></pre>"},{"location":"seeding/#metodos-comunes","title":"M\u00e9todos Comunes","text":"<pre><code>// Obtener un \u00fanico registro\n$user = DB::table('users')-&gt;where('name', 'John')-&gt;first();\n\n// Ordenar y agrupar resultados\n$users = DB::table('users')\n    -&gt;orderBy('name', 'desc')\n    -&gt;groupBy('count')\n    -&gt;having('count', '&gt;', 100)\n    -&gt;get();\n</code></pre> <p>Nota: Para m\u00e1s informaci\u00f3n sobre operaciones adicionales como join, insert, update, delete, consulta la documentaci\u00f3n oficial de Laravel.</p>"},{"location":"testing/","title":"Pruebas Automatizadas en Laravel","text":""},{"location":"testing/#introduccion","title":"Introducci\u00f3n","text":"<p>Laravel ofrece soporte integrado para pruebas automatizadas mediante PHPUnit. Este documento muestra c\u00f3mo organizar y crear pruebas en tu aplicaci\u00f3n Laravel.</p>"},{"location":"testing/#organizacion-de-las-pruebas","title":"Organizaci\u00f3n de las Pruebas","text":"<p>Las pruebas se ubican en la carpeta <code>tests</code> y se dividen en dos categor\u00edas:</p> <ul> <li>Unit: Pruebas unitarias para m\u00e9todos y funciones individuales.</li> <li>Feature: Pruebas que eval\u00faan la interacci\u00f3n entre componentes.</li> </ul> <p>Consulta la documentaci\u00f3n oficial de pruebas en Laravel para obtener m\u00e1s detalles.</p>"},{"location":"testing/#creacion-de-tests","title":"Creaci\u00f3n de Tests","text":"<p>Genera tests utilizando Artisan:</p> <ul> <li> <p>Para crear un test en la carpeta Feature:     <code>php artisan make:test UserTest</code></p> </li> <li> <p>Para crear un test en la carpeta Unit:     <code>php artisan make:test UserTest --unit</code></p> </li> </ul>"},{"location":"testing/#uso-de-aserciones","title":"Uso de Aserciones","text":"<p>Las pruebas se basan en aserciones que verifican el comportamiento esperado del c\u00f3digo. Revisa las aserciones de PHPUnit para m\u00e1s informaci\u00f3n.</p>"},{"location":"testing/#ejemplo-de-prueba","title":"Ejemplo de Prueba","text":"<pre><code>class MathTest extends TestCase\n{\n    public function testExample()\n    {\n        $this-&gt;assertEquals(4, Math::sum(2, 2));\n    }\n}\n</code></pre>"},{"location":"testing/#ejecucion-de-tests","title":"Ejecuci\u00f3n de Tests","text":"<p>Para ejecutar los tests, puedes utilizar uno de los siguientes comandos:</p> <ul> <li> <p>Usando Artisan (recomendado en Laravel):     <code>php artisan test</code></p> </li> <li> <p>Usando PHPUnit directamente:     <code>./vendor/bin/phpunit</code></p> </li> </ul>"},{"location":"vistas/","title":"Vistas en Laravel","text":"<p>Las vistas en Laravel: - Presentan el resultado de forma visual al usuario, permitiendo interacci\u00f3n - Separan la presentaci\u00f3n de resultados de la l\u00f3gica (controladores) y base de datos (modelos) - No realizan consultas ni procesan datos, solo reciben y muestran informaci\u00f3n - Se almacenan en la carpeta <code>resources/views</code> como ficheros PHP</p>"},{"location":"vistas/#contenido-de-las-vistas","title":"Contenido de las vistas","text":"<p>Pueden contener: - C\u00f3digo HTML - Assets (CSS, im\u00e1genes, JavaScript, etc. que estar\u00e1n en la carpeta <code>public</code>) - C\u00f3digo PHP (o plantillas con Blade) para presentar datos como resultado HTML</p>"},{"location":"vistas/#vistas-sin-blade","title":"Vistas sin Blade","text":"<p>Ejemplo de vista guardada en <code>resources/views/home.php</code>:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi Web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u00a1Hola &lt;?php echo $name; ?&gt;!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Para asociarla con una ruta, en el fichero <code>routes/web.php</code> a\u00f1adimos:</p> <pre><code>Route::get('/', function() {\n    return view('home', ['name' =&gt; 'John']);\n});\n</code></pre>"},{"location":"vistas/#pasar-parametros-a-vistas","title":"Pasar par\u00e1metros a vistas","text":"<p>Al construir una vista podemos pasarle par\u00e1metros de varias formas:</p> <pre><code>view('home', ['name' =&gt; 'Pedro', 'age' =&gt; 18]);\nview('home')-&gt;with('name', 'Javi')-&gt;with('age', 18);\n</code></pre>"},{"location":"vistas/#vistas-en-subcarpetas","title":"Vistas en subcarpetas","text":"<p>Para hacer referencia a una vista en una subcarpeta: - <code>\"resources/views/user/profile\"</code> \u2192 <code>\"user.profile\"</code></p> <p>Por ejemplo:</p> <pre><code>Route::get('user/profile/{id}', function($id) {\n    $user = // Cargar usuario a partir de $id\n    return view('user.profile', ['user' =&gt; $user]);\n});\n</code></pre>"}]}